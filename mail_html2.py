import tkinter as tk
from tkinter import filedialog, messagebox, scrolledtext, simpledialog
import smtplib, csv, time, json, os
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart

# ---------------- –õ–û–ì ----------------
def log_message(msg):
    log_box.insert(tk.END, msg + "\n")
    log_box.see(tk.END)

# ---------------- –®–ê–ë–õ–û–ù–´ ----------------
TEMPLATES_FILE = "templates.json"

default_templates = {
    "–ü—Ä–æ—Å—Ç–æ–π": "<h2>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {{name}}!</h2><p>–ë—É–¥–µ–º —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏.</p>",
    "–° –∫–∞—Ä—Ç–∏–Ω–∫–æ–π": "<h2>–ü—Ä–∏–≤–µ—Ç, {{name}}!</h2><p>–°–∫–æ—Ä–æ —Å–æ—Å—Ç–æ–∏—Ç—Å—è —Å–æ–±—ã—Ç–∏–µ, –ø—Ä–∏–≥–ª–∞—à–∞–µ–º!</p><img src='https://i.ibb.co/Z6JBxRHF/aa.png' width='300'>",
    "–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π": "<p>–£–≤–∞–∂–∞–µ–º—ã–π(–∞—è) {{name}},</p><p>–ü—Ä–∏–≥–ª–∞—à–∞–µ–º –í–∞—Å –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ –Ω–∞—à–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏.</p>"
}

def load_templates():
    if not os.path.exists(TEMPLATES_FILE):
        save_templates(default_templates)
        return default_templates
    try:
        with open(TEMPLATES_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except:
        save_templates(default_templates)
        return default_templates

def save_templates(data):
    with open(TEMPLATES_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

# ---------------- –ü–û–ß–¢–ê ----------------
def send_email(to_email, subject, body, gmail_user, gmail_pass):
    try:
        msg = MIMEMultipart()
        msg["From"] = gmail_user
        msg["To"] = to_email
        msg["Subject"] = subject
        msg.attach(MIMEText(body, "html", "utf-8"))

        server = smtplib.SMTP("smtp.gmail.com", 587)
        server.starttls()
        server.login(gmail_user, gmail_pass)
        server.sendmail(gmail_user, to_email, msg.as_string())
        server.quit()
        return True
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ {to_email}: {e}")
        return False

# ---------------- –û–¢–ü–†–ê–í–ö–ê ----------------
def send_test_email():
    gmail_user = gmail_entry.get().strip()
    gmail_pass = pass_entry.get().strip()
    if not gmail_user or not gmail_pass:
        messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ Gmail –∏ –ø–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
        return
    body = text_body.get("1.0", tk.END)
    log_message("‚è≥ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–∞...")
    if send_email(gmail_user, "–¢–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ", body, gmail_user, gmail_pass):
        log_message("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")

def send_bulk():
    gmail_user = gmail_entry.get().strip()
    gmail_pass = pass_entry.get().strip()
    delay = int(delay_entry.get())
    if not gmail_user or not gmail_pass:
        messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ Gmail –∏ –ø–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
        return
    if not guests:
        messagebox.showerror("–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ CSV")
        return

    success, fail = 0, 0
    for guest in guests:
        name, email = guest
        body = text_body.get("1.0", tk.END).replace("{{name}}", name)
        log_message(f"‚è≥ –û—Ç–ø—Ä–∞–≤–∫–∞: {name} <{email}>")
        if send_email(email, "–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ", body, gmail_user, gmail_pass):
            log_message(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {email}")
            success += 1
        else:
            fail += 1
        time.sleep(delay)

    log_message(f"üì® –ì–æ—Ç–æ–≤–æ! –£—Å–ø–µ—à–Ω–æ: {success}, –û—à–∏–±–∫–∏: {fail}")

# ---------------- CSV ----------------
def load_csv():
    global guests
    filename = filedialog.askopenfilename(filetypes=[("CSV files", "*.csv")])
    if filename:
        with open(filename, "r", encoding="utf-8") as f:
            reader = csv.reader(f)
            guests = [(row[0], row[1]) for row in reader if len(row) >= 2]
        log_message(f"‚úÖ CSV –∑–∞–≥—Ä—É–∂–µ–Ω: {len(guests)} –≥–æ—Å—Ç–µ–π")

# ---------------- –®–ê–ë–õ–û–ù–´ –í GUI ----------------
def apply_template(*args):
    text_body.delete("1.0", tk.END)
    text_body.insert(tk.END, templates[template_var.get()])

def save_new_template():
    name = simpledialog.askstring("–ù–æ–≤—ã–π —à–∞–±–ª–æ–Ω", "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞:")
    if not name:
        return
    templates[name] = text_body.get("1.0", tk.END).strip()
    save_templates(templates)
    menu = template_menu["menu"]
    menu.add_command(label=name, command=tk._setit(template_var, name))
    log_message(f"üíæ –®–∞–±–ª–æ–Ω '{name}' —Å–æ—Ö—Ä–∞–Ω—ë–Ω")

# ---------------- GUI ----------------
root = tk.Tk()
root.title("üì® –†–∞—Å—Å—ã–ª–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π")
root.geometry("900x800")

guests = []
templates = load_templates()

tk.Label(root, text="–í–∞—à Gmail:").grid(row=0, column=0, sticky="w")
gmail_entry = tk.Entry(root, width=40)
gmail_entry.grid(row=0, column=1)

tk.Label(root, text="–ü–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:").grid(row=1, column=0, sticky="w")
pass_entry = tk.Entry(root, width=40, show="*")
pass_entry.grid(row=1, column=1)

tk.Button(root, text="–ó–∞–≥—Ä—É–∑–∏—Ç—å CSV", command=load_csv).grid(row=2, column=0, pady=5)

tk.Label(root, text="–ó–∞–¥–µ—Ä–∂–∫–∞ (—Å–µ–∫) –º–µ–∂–¥—É –ø–∏—Å—å–º–∞–º–∏:").grid(row=3, column=0, sticky="w")
delay_entry = tk.Entry(root, width=5)
delay_entry.insert(0, "3")
delay_entry.grid(row=3, column=1, sticky="w")

tk.Label(root, text="–®–∞–±–ª–æ–Ω:").grid(row=4, column=0, sticky="w")
template_var = tk.StringVar(value=list(templates.keys())[0])
template_menu = tk.OptionMenu(root, template_var, *templates.keys())
template_menu.grid(row=4, column=1, sticky="w")

tk.Button(root, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω", command=save_new_template).grid(row=4, column=2, padx=5)

template_var.trace("w", apply_template)

tk.Label(root, text="–¢–µ–∫—Å—Ç –ø–∏—Å—å–º–∞ (HTML):").grid(row=5, column=0, sticky="w")
text_body = scrolledtext.ScrolledText(root, wrap=tk.WORD, width=80, height=15)
text_body.grid(row=6, column=0, columnspan=3, pady=5)

tk.Label(root, text="–õ–æ–≥–∏:").grid(row=7, column=0, sticky="w")
log_box = scrolledtext.ScrolledText(root, wrap=tk.WORD, width=80, height=10, state="normal")
log_box.grid(row=8, column=0, columnspan=3, pady=5)

# –ö–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É
button_frame = tk.Frame(root)
button_frame.grid(row=9, column=0, columnspan=3, pady=15)

tk.Button(button_frame, text="–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä",
          command=lambda: log_message("üìã " + text_body.get("1.0", tk.END)[:200]),
          bg="blue", fg="white", width=25).pack(side="left", padx=5)

tk.Button(button_frame, text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ",
          command=send_test_email, bg="orange", fg="white", width=25).pack(side="left", padx=5)

tk.Button(button_frame, text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º",
          command=send_bulk, bg="green", fg="white", width=25).pack(side="left", padx=5)

root.mainloop()
